@namespace Oqtane.Modules.Admin.Jobs
@inherits ModuleBase
@inject IJobLogService JobLogService
@inject IStringLocalizer<Log> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (_jobLogs == null)
{
    <p><em>@SharedLocalizer["Loading"]</em></p>
}
else
{
    <button type="button" class="btn btn-secondary" @onclick="Refresh">@Localizer["Refresh"]</button>
    <br /><br />

    <Pager Items="@_jobLogs">
        <Header>
            <th>@SharedLocalizer["Name"]</th>
            <th>@SharedLocalizer["Status"]</th>
            <th>@Localizer["Started"]</th>
            <th>@Localizer["Finished"]</th>
        </Header>
        <Row>
            <td>@context.Job.Name</td>
            <td>@DisplayStatus(context.Job.IsExecuting, context.Succeeded)</td>
            <td>@UtcToLocal(context.StartDate)</td>
            <td>@UtcToLocal(context.FinishDate)</td>
        </Row>
        <Detail>
            <td colspan="4">@((MarkupString)context.Notes)</td>
        </Detail>
    </Pager>
}

@code {
    private List<JobLog> _jobLogs;

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Host;

    protected override async Task OnParametersSetAsync()
    {
        await GetJobLogs();
    }

    private async Task GetJobLogs()
    {
        var jobId = -1;
        if (PageState.QueryString.ContainsKey("id"))
        {
            jobId = int.Parse(PageState.QueryString["id"]);
        }
        _jobLogs = await JobLogService.GetJobLogsAsync(jobId);
    }

    private string DisplayStatus(bool isExecuting, bool? succeeded)
    {
        var status = string.Empty;
        if (isExecuting)
        {
            status = Localizer["Executing"];
        }
        else
        {
            if (succeeded != null && succeeded.Value)
            {
                status = Localizer["Succeeded"];
            }
            else
            {
                status = Localizer["Failed"];
            }
        }

        return status;
    }

    private async Task Refresh()
    {
        ShowProgressIndicator();
        await GetJobLogs();
        HideProgressIndicator();
    }
}
